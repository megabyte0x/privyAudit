{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":414513608250252990,"abi":{"parameters":[{"name":"raw_data","type":{"kind":"struct","path":"RawData","fields":[{"name":"total_received","type":{"kind":"field"}},{"name":"total_expenses","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_tax","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5873010511009803321":{"error_kind":"string","string":"Tax calculation is incorrect"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}}},"bytecode":"H4sIAAAAAAAA/+VcT28bVRAfx06aPwScxKa0SdsQ2iSlFN7zru3dllLnn7gC4oQQUlxv4MqFOxfEGfEd4Mgn4MgBDnwBJC4cufABkOir3yTPu8tW4f1mtStGip7z1v555jczb2bWshs0lZOnf5/Zxy27zlFWeG9kV+Un2sUK1CAMk2Ev0YE+Vb14HPVV2B8PIh3pftSf9KIgSKIwGsbjeKhiHQaJPuvHwZkFa/x3vXR6I8d0GLbLa9PlvGE3eP0xtddylCD3hVR9h1wSS6WwdBOoVwvozJb1TYOy0kj5xlfvZoHel8V29Z2XVNiAP+/UuOz7zBMu4BeA9kpxuJCD68vhAo5DEbtb1m7fipPGRfr7CpBD96A3uAdUXImfFw+XFO1xKKqzC4mTflRa9Vy06xITwgQu0sWpzHtLlK2eTT/lMsq6JPpWvEXCBeoS0Lk1DMrgybi8lm7ZritMCAfgMmWDcoXqFZTLhAvKFSHnomcUD/4yNr8AwEqmiag5vgio36KNUzSHyMNslWQ7F+Un2vh4VcA3L5JMt+HigrnoS3HxkhAXjFu/IpdMxqq8zqtt1zUmhAlsU7bIrVG9ilybcIG6BnauxIFvErTKB/46yR74vvot27hHc4hstjbAHLJUudnqALCSaYOZ22wpP9EmrjcE4rFLsvmi/EQbv3QF7H6ZZJoCFxfMxakUF1eFuLhaAhfIMyVMejP54MvrK0K8urgsc+CYQPJwDceDxNkqNnhcB/q/hkPGMB6Udydt065bTAgnyyZlh4wtqteQsUm4oNwCOxedNNzooJvFdaCON3B6iXDYtnGP5hA57N4Ec8hS5SHjFgArmQ74IkOGieubAvG4TbL5ovxEG79sC9j9KtBut365uGAuzqS42BHiYqcELoBnio4GpzP54Mvra0K8urgs6CFjG4h1G8eDJoLXkfOBFaWjGaquU7UH4Ds4e+s4AOnhuLxPWXbtuseEcCLvUnYA2qN6DUC7hAvKPbBz0YWSmzB0I3sDqOM+Ti8RDjdt3KM5RA7id8EcslR5AHodgJVMbz6IDEAmru8KxOM9ks0X5Sfa+OWegN1vAO1265eLi+VCh1Jc3Bfi4n4JXADPlOApZTP54Mvrm0K8urgs6AEIycNbOB4kBqDzYRqloxn47lC1h3OFs7eGA9BkPNDlfQKk7dpjQjiRNWUHoB7VawDShAvKHti56ELJTRi6kd0H6hjg9BLhcNfGPZpD5CAegjlkqfIA1AdgJdObDyIDkInrUCAeBySbL8pPtPHLQMDuIdBut365uOCmP5biIhLiIiqBC+CZ0h8m4Uw++PIaC/Hq4rKgByAkDw9wPAgMQBfDNEpHM/ApqvZw/pDof1fj3yZEjX/WX4t8b49rPJrDAKjjI8LGDbpfMD5+JOCbd0jmLHdxwTUykeLisRAXj0vgAphbw34wmw++vI6EeHVxWdD9ApKHAxwPEv3Cee+J0tH0Rw+p2r3sIc7e3BumYB+d5zvKRyYmDwl6LmXOD+UplCMY7EHo+urIrsdEszdvzYUHqT3zpCsppdANzjHhAv0EF4RPXB5OHB7qEuzAG++wYplMf8RmcgT0+TFhkxDd1LZtbqEbuTmg3Ua3vIO94ejt7q87jzt2Pfr7t3d/+OarfefSs+9tGvnl219/+v7r04l7bbvgdTsFr7tt1+4fB9c+//m7E/eaKsDsFWCGBZijAszDAszjAsz3CjA/KMD8sADzowLMjwswPynA/NSu8Z+/f/HXrS/f532OhZmf/6KLX17is3Nk/1d+0mP8FRl8la5xri3u+6btb+W8rvEv/8+l1qLnpvfdvdWca4y5YVdXX7ZjKbV2HVwgl5rxOzL4ub7qOo87KTtdvkcgHRiPa+w8ZWUudY2fm86ZBl4/ndalmfNeLBwzHWeP+fwHIEAPfp1YAAA=","debug_symbols":"tdpNjuIwEAXgu2TNwi67ymWuMhq1+AmtSFFAAUYaob77pFs4QzvQG/vtcFx8C5xXBpxbs2+31/e3bjgcz836163pj7vNpTsO0+jWmK9L59Nm+BydL5vx0qyt1bBq2mE/vSTrP1bNoevbZi30sVoUk0m1RPJY+nvVWKhOUN1BdQ/VGaoLVA9QXaF6LNfdrDPlaTJY3mJ5wvLleXXW32sdxZz3WJ6xvGD58sw65sQHk/OK5SOUJ4PlbQV+XtrAOU9Yvjy13tp7raeQ8x7LM5YXLF8htZFe84rly1PrZf5wwuLbn8HyFssTlq+QWjGJ13wrdx7LV0gt02tesHzA8orly1PLNt5r2eXbiTdY3mJ5wvIVUht/4D2WL08th9QUWBe/xwXLByyvWL5CamVe2pg3BTZYvkJq5+3kCU9Y3mF5j+XLUyuUllZ83hRYsHzA8orly1Mr5jUvBsuXp1Y03ZgSF/9hEpZ3WN5j+QqpDWlpg8mbggiWr5DaeTN8wiuWj1A+GCxfntrg5qXlvCkEwvIOy3ssX57aYH/gBcuXpzbEdGOqWZwqKZaPUF4Nlq+QWk1LqzZvCkpYvkJq583wCe+xPGN5wfLlqVXWxAef84rlI5SPBsvbCnyqVc0PliJh+fLUqtfXvMfyjOUFy5enNpp0JBnJ5rxi+QjlrTFg34J9AvvPk0v03+fvvWoabMeu77v3t8eHz6bLfzZjt9n27X14uA67h9nL31OaSe8/jcddu7+O7af0NTfx/wA=","file_map":{"62":{"source":"struct RawData {\n    total_received: Field,\n    total_expenses: Field,\n}\n\nfn calculate_tax(total_income: Field) -> Field {\n    // TODO: Add tax calculation logic\n    let mut income_tax = 0;\n    let income = total_income as u64;\n\n    if (income < 400000) {\n        income_tax = 0;\n    } else if (income >= 400000 & income < 800000) {\n        income_tax = (income - 400000) * 5;\n    } else if (income >= 800000 & income < 1200000) {\n        income_tax = 20000 + (income - 800000) * 10;\n    } else if (income >= 1200000 & income < 1600000) {\n        income_tax = 100000 + (income - 1200000) * 15;\n    } else if (income >= 1600000 & income < 2000000) {\n        income_tax = 220000 + (income - 1600000) * 20;\n    } else if (income >= 2000000 & income < 2400000) {\n        income_tax = 360000 + (income - 2000000) * 25;\n    } else {\n        income_tax = 480000 + (income - 2400000) * 30;\n    }\n    income_tax = income_tax / 100;\n    if (income < 1200000) {\n        income_tax = 0;\n    }\n    income_tax as Field\n}\n\nfn main(raw_data: RawData, input_tax: pub Field) {\n    // TODO: Add constraints\n    let total_income = raw_data.total_received - raw_data.total_expenses;\n    let calculated_tax = calculate_tax(total_income);\n    assert(calculated_tax == input_tax, \"Tax calculation is incorrect\");\n}\n\n#[test]\nfn calculate_tax_test() {\n    let total_income = 120000;\n    let input_tax = calculate_tax(total_income);\n    assert(input_tax == 0);\n}\n\n#[test(should_fail)]\nfn calculate_tax_test_2() {\n    let total_income = 1200001;\n    let input_tax = calculate_tax(total_income);\n    assert(input_tax == 0);\n}\n","path":"/Users/megabyte0x/Developer/noir/private_tax/circuit/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert"]}