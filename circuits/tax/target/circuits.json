{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":3422762933384153947,"abi":{"parameters":[{"name":"raw_data","type":{"kind":"struct","path":"RawData","fields":[{"name":"total_received","type":{"kind":"field"}},{"name":"total_expenses","type":{"kind":"field"}}]},"visibility":"private"},{"name":"input_tax","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5873010511009803321":{"error_kind":"string","string":"Tax calculation is incorrect"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}}},"bytecode":"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","debug_symbols":"tdtNTiMxEIbhu/Sahf+qyuYqoxEKEFCkKEEhjDRC3H0CijuMLbJpv7u4u/Js2l9ccjvv0+P6/u35brN72r9Ot7/ep+3+YXXc7Hen0fvkvi69vqx2n6PX4+pwnG6913wzrXePnx+LfNxMT5vterrV8HHTF19qs30v/X0zeVQPqB5RPaG6oLqiuqF6RvWyXC+1NvjYpsmxvGf5wPLL8xpMKl9cyyeWF5ZXll+e2ej1XBujb/nM8gXlg2N5P4CXmdeWDywfR/IptHxieWF5ZXlj+czyA1JrtTaW1HZ/juU9yweWH5BaKT/zieWXpzZFd65NSVpeWd5YPrP88tSmUB9tknYxTI7l/QA+z3xu+cDykeUTywvLK8sbyw9Irb/M+9LyBeXFsbxn+QGpLbW/F9/2ORJZPrG8sPyA1NoV3lh+eWol1VrRts+RgvLqWN6zfBjAW+Wt3RHRyPJpAD9PTOs2eIXlleWN5TPLF5Q3x/IDUhsv877tcyywfGT5xPLLU6vzhot2G42mLG8sn1l+QGrLz3x2LL88tTrXam7X2hxYPrJ8YvkBqdX6o6Ddq5msLD8gtaoz372tzSxfUL44lvcsH1g+svyA1MqFb9faIiyvLG8svzy1FutqZd0ubCko752DfQ/7y4Nr/pofYX95dC3X2uxS5wvsK+wb7A+Ib64tQ/bdYRFXWH/AMSnLOvvdmcYB56Su+wH2I+wn2BfYV9gfkF+7+LnzM+wX1h9wYOq6vzy/ee48cw6dH2A/wn6CfRngy+z3z1dh3wb4qfpFOj/DfmH9AUenrvse9gPsR9gfkF+5+Nr5AvsK+wb7y/NbJJ5ri3T9+Q9nqIKb/RD/nxSnwf1hs91unu++//nndPnP6rBZ3W/X5+HT2+7h293j35d6p37/5bB/WD++Hdaf0te9E/8P","file_map":{"62":{"source":"struct RawData {\n    total_received: Field,\n    total_expenses: Field,\n}\n\nfn calculate_tax(total_income: Field) -> Field {\n    let mut income_tax = 0;\n    let income = total_income as u64;\n\n    if (income < 400000) {\n        income_tax = 0;\n    } else if (income >= 400000 & income < 800000) {\n        income_tax = (income - 400000) * 5 / 100;\n    } else if (income >= 800000 & income < 1200000) {\n        income_tax = 20000 + (((income - 800000) * 10) / 100);\n    } else if (income >= 1200000 & income < 1600000) {\n        income_tax = 60000 + (((income - 1200000) * 15) / 100);\n    } else if (income >= 1600000 & income < 2000000) {\n        income_tax = 120000 + (((income - 1600000) * 20) / 100);\n    } else if (income >= 2000000 & income < 2400000) {\n        income_tax = 200000 + (((income - 2000000) * 25) / 100);\n    } else {\n        income_tax = 300000 + (((income - 2400000) * 30) / 100);\n    }\n    if (income < 1200000) {\n        income_tax = 0;\n    }\n    income_tax as Field\n}\n\nfn main(raw_data: RawData, input_tax: pub Field) {\n    // TODO: Add constraints\n    let total_income = raw_data.total_received - raw_data.total_expenses;\n    let calculated_tax = calculate_tax(total_income);\n    assert(calculated_tax == input_tax, \"Tax calculation is incorrect\");\n}\n\n#[test]\nfn calculate_tax_test() {\n    let total_income = 120000;\n    let input_tax = calculate_tax(total_income);\n    assert(input_tax == 0);\n}\n\n#[test(should_fail)]\nfn calculate_tax_test_2() {\n    let total_income = 1200001;\n    let input_tax = calculate_tax(total_income);\n    assert(input_tax == 0);\n}\n","path":"/Users/megabyte0x/Developer/noir/private_tax/circuits/tax/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert"]}